{
	"name": "Incremental_Data_pipeline",
	"properties": {
		"activities": [
			{
				"name": "CurrentTime",
				"type": "SetVariable",
				"dependsOn": [],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "Current_time",
					"value": {
						"value": "@utcNow()",
						"type": "Expression"
					}
				}
			},
			{
				"name": "AzureSQltoDatalake",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "CurrentTime",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Get_lastUpdatedDate",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "SELECT * FROM \n@{pipeline().parameters.scheme}.@{pipeline().parameters.table} \nWHERE @{pipeline().parameters.updated_column} > '@{activity('Get_lastUpdatedDate').output.value[0].cdc}';\n\nIF NOT EXISTS (SELECT 1 FROM dbo.last_ingested_dates\n WHERE tablename = )@{pipeline().parameters.scheme}.@{pipeline().parameters.table} )\nBEGIN\n\ninsert into dbo.last_ingested_dates values ('@{pipeline().parameters.table}','@{activity('Get_lastUpdatedDate').output.value[0].cdc}'\n)\n\nEND",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"sink": {
						"type": "ParquetSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "ParquetWriteSettings"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference",
						"parameters": {
							"schema": {
								"value": "@pipeline().parameters.scheme",
								"type": "Expression"
							},
							"tablename": {
								"value": "@pipeline().parameters.table",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "Parquet_datalake",
						"type": "DatasetReference",
						"parameters": {
							"container": "bronze",
							"folder": {
								"value": "@pipeline().parameters.table",
								"type": "Expression"
							},
							"filename": {
								"value": "@concat(pipeline().parameters.table,'_',variables('Current_time'))",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "Get_lastUpdatedDate",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "JsonSource",
						"storeSettings": {
							"type": "AzureBlobFSReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "JsonReadSettings"
						}
					},
					"dataset": {
						"referenceName": "latestUpdatedDate",
						"type": "DatasetReference",
						"parameters": {
							"container": "bronze",
							"folder": {
								"value": "@{pipeline().parameters.table}",
								"type": "Expression"
							},
							"file": "cdc.json"
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Get_Max_Ingesteddate",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "AzureSQltoDatalake",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "AzureSqlLink",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "SELECT MAX(@{pipeline().parameters.updated_column}) AS LastUpdatedDate\nFROM @{pipeline().parameters.scheme}.@{pipeline().parameters.table}",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "UpdateMaxIngestedDate",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Get_Max_Ingesteddate",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "@{activity('Get_Max_Ingesteddate').output.reseultset[0].rows[0].LastUpdatedDate}",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"sink": {
						"type": "AzureSqlSink",
						"writeBehavior": {
							"value": "MERGE [dbo].[last_ingested_dates] as target\nusing (\n    SELECT @{pipeline().parameters.table} AS tablename,\n    @{activity('Get_Max_Ingesteddate').output.value[0]} AS Lastupdateddate\n) as source\non target.tablename = source.tablename\nwhen matched then\n    UPDATE SET target.last_ingested_date = source.Lastupdateddate\nwhen not macthed then\n    INSERT (tablename,last_ingested_date) VALUES\n    (source.tablename,source.Lastupdateddate);\n",
							"type": "Expression"
						},
						"sqlWriterUseTableLock": false,
						"upsertSettings": {
							"useTempDB": false
						},
						"disableMetricsCollection": false
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference",
						"parameters": {
							"schema": {
								"value": "@pipeline().parameters.scheme",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference",
						"parameters": {
							"schema": {
								"value": "@pipeline().parameters.scheme",
								"type": "Expression"
							},
							"tablename": {
								"value": "@pipeline().parameters.table",
								"type": "Expression"
							}
						}
					}
				]
			}
		],
		"parameters": {
			"scheme": {
				"type": "string"
			},
			"table": {
				"type": "string"
			},
			"updated_column": {
				"type": "string"
			}
		},
		"variables": {
			"Current_time": {
				"type": "String"
			},
			"keycolumn": {
				"type": "Array",
				"defaultValue": [
					"tablename"
				]
			}
		},
		"annotations": []
	}
}